input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ForgotPasswordInput {
  email: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input SignInInput {
  email: String!
  password: String!
}

type ChangePasswordPayload {
  success: Boolean!
}

type ForgotPasswordPayload {
  success: Boolean!
}

type RefreshTokenPayload {
  accessToken: String!
}

type SignInPayload {
  accessToken: String!
  refreshToken: String!
}

type UserSession implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  refresh_token: String!
  updatedAt: DateTime!
  userId: ID!
  # user: User!
}

extend type Mutation {
  changePassword (input: ChangePasswordInput!): ChangePasswordPayload! @auth
  forgotPassword (input: ForgotPasswordInput!): ForgotPasswordPayload! @guest
  refreshToken (input: RefreshTokenInput!): RefreshTokenPayload! @guest
  signIn (input: SignInInput!): SignInPayload! @guest
}
